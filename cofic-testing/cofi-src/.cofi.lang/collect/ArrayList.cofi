module .cofi.lang;
package .cofi.lang.collect;

public class ArrayList<E>(capacity : Natural) extends MutableList<E> {
    private Field len : Natural := 0;
    private Field felements : Array<E> := Array.create(capacity);
    
    public append(e : E) : () {
        growCapacityToAtLeast(len.plus(1));

        felements.setAtTo(len)(e);
        len := len.plus(1);
    }
    
    public growCapacityToAtLeast(minCapacity : Natural) : () {
        felements.length().lessThan(minCapacity).ifTrue({ ->
            old : Array<E> := felements;
            new : Array<E> := Array.create(minCapacity);
            
            i : Natural := 0;
            Bool.while({ -> return (i.lessThan(len)); }, { ->
                o : E := old.get(i);
                new.setAtTo(i)(o);
                i := i.plus(1);
            });
            
            felements := new;
        });
    }

    public get(index : Natural) : E { return (felements.get(index)); }
    
    public setAt(index : Natural) To (e : E) : E { return (felements.setAtTo(index)(e)); }
    
    public length() : Natural { return (len); }
}
