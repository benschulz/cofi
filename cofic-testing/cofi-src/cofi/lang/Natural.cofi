module .cofi.lang;
package .cofi.lang;

import .cofi.lang.primitives.Int32;

public abstract class Natural {
    public asString() : String {}

    public equalTo(other : Natural) : Bool {}

    public greaterThan(other : Natural) : Bool {}

    public lessThan(other : Natural) : Bool {}

    public plus(addend : Natural) : Natural {}
}

class SmallNatural(magnitude : Int32) extends Natural {
    private Field mag : Int32 := magnitude;

    public asString() : String {
        return (mag.asString());
    }

    public equalTo(other : Natural) : Bool {}

    public greaterThan(other : Natural) : Bool {}

    public lessThan(other : Natural) : Bool {
        o : SmallNatural := SmallNatural.cast(other);

        t : Function1<Int32, Bool> := mag.lessThan;
        r : Bool := t(o.mag);

        return (r);
    }

    public plus(addend : Natural) : Natural {
        a : SmallNatural := SmallNatural.cast(addend);
        sum : Int32 := mag.plus(a.mag);

        return (SmallNatural.create(sum));
    }
}
